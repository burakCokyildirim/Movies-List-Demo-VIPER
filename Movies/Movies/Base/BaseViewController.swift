//
//  BaseViewController.swift
//  Movies
//
//  Created by Burak Çokyıldırım on 21.11.2020.
//  Copyright (c) 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Burak Cokyildirim
//

import UIKit
import NVActivityIndicatorView

class BaseViewController: UIViewController, NVActivityIndicatorViewable {
    
    lazy var keyWindow: UIWindow? = {
        return UIApplication.shared.connectedScenes
            .filter({$0.activationState == .foregroundActive})
            .map({$0 as? UIWindowScene})
            .compactMap({$0})
            .first?.windows
            .filter({$0.isKeyWindow}).first
    }()
    
    lazy var loading: NVActivityIndicatorView? = {
        guard let window = self.keyWindow else { return nil }
        
        let loading = NVActivityIndicatorView(frame: CGRect.zero, type: .ballPulseSync, color: .blueGrey, padding: 20)
        window.addSubview(loading)
        loading.translatesAutoresizingMaskIntoConstraints = false
        loading.centerXAnchor.constraint(equalTo: window.centerXAnchor).isActive = true
        loading.centerYAnchor.constraint(equalTo: window.centerYAnchor).isActive = true
        return loading
    }()

    lazy var blockerView: UIView? = {
        guard let window = self.keyWindow else { return nil }
        
        let blocker = UIView(frame: window.frame)
        blocker.backgroundColor = UIColor.black.withAlphaComponent(0.4)
        return blocker
    }()
    
    var barTitle: String? {
        didSet {
            navigationItem.title = barTitle
        }
    }
    
    // MARK: - Lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        configureView()
    }
    
    // MARK: - Configure
    
    func configureView() {
        let tap: UITapGestureRecognizer = UITapGestureRecognizer(target: self, action: #selector(dismissKeyboard(press:)))
        view.addGestureRecognizer(tap)
        tap.cancelsTouchesInView = false
        
    }
    
}

// MARK: - Extensions

// MARK: - Protocol Implemantations

extension BaseViewController: BaseViewControllerProtocol {
    func showError(errorModel: ErrorModel, completionHandler: PopupCompletionHandler? = nil) {
        stopLoading()
        stopProgress()
        unlockUI()
        showPopup(title: errorModel.errorType.localized, message: errorModel.errorMessage, completionHandler: completionHandler)
    }
    
    func showReachability(errorModel: ErrorModel, completionHandler: PopupCompletionHandler? = nil) {
        unlockUI()
        stopProgress()
        showPopup(title: errorModel.errorType.localized, message: errorModel.errorMessage) { (closeType) in
            if closeType == .done {
                self.showSplash()
            }
        }
    }
    
    func showSplash() {
        SplashWireframe().show(transitionType: .root)
    }
    
    func lockUI() {
        navigationController?.navigationBar.isUserInteractionEnabled = false
        navigationController?.view.isUserInteractionEnabled = false
    }
    
    func unlockUI() {
        navigationController?.navigationBar.isUserInteractionEnabled = true
        navigationController?.view.isUserInteractionEnabled = true
    }
    
    @objc func startProgress() {
        guard let window = self.keyWindow else { return }
        
        if let blockerView = blockerView {
            window.addSubview(blockerView)
        }
        
        loading?.startAnimating()
        
        if let loading = loading {
            window.bringSubviewToFront(loading)
        }
        
        self.view.isUserInteractionEnabled = false
    }
    
    @objc func stopProgress() {
        blockerView?.removeFromSuperview()
        self.view.isUserInteractionEnabled = true
        loading?.stopAnimating()
    }
    
    @objc func startLoading() {
        if !(loading?.isAnimating ?? false) { loading?.startAnimating() }
    }
    
    @objc func stopLoading() {
        loading?.stopAnimating()
    }
    
    @objc func dismissKeyboard(press: UITapGestureRecognizer? = nil) {
        self.view.endEditing(true)
    }
}
